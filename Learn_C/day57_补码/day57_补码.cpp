// day57_补码.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>

int main()
{
    //int i = (-1);
    //printf("%#X\n", i);  //十六进制输出

    int i = 0Xfffffffd;
    printf("%d\n", i);  


    return 0;

}





/* 补码: 
*    原码: 也叫符号-绝对值码   最高位0表示正  1表示负,其余二进制位是该数字的绝对值的二进制位 
*          原码简单易懂 加减运算复杂  存在加减乘除四种运算,增加cpu难度  零的表示不唯一
*   
*    反码:  反码运算不便,也没有在计算机应用
* 
*    移码: 移码表示数值平移n位,n称为移码量   主要用于浮点数的阶码的存储
* 
*    补码: 
        十进制转二进制:
            1.求正整数转二进制: 除2取余数 直至商为零,余数倒叙排序
            2.求负整数转二进制: 先求与该负数相对应的正整数的二进制代码,然后将所有位取反,末尾加1,不够位数时,左边补1
                         (-3)   011 取反是 100 加一后是101 int是四个字节 三十二位,所以左边要补29位
            3.零转二进制:  全是零

*      已知二进制转十进制:
*        1.如果首位是0,则表明是正整数,按普通方法来求
*        2.如果首位是1,则表示是负整数  ,将所有位取反,末尾加1,所得数字就是该负数的绝对值  
*        3.(左边有24个1)11001010,对应的十六进制是0XFFFFFFCA; 取反是(左边24个0)00110101, 末尾加1是(左边是24个0)0011 0110-> (36)16 -> (54)10 -> (-54)
*            如果全是零,则对应的十进制数字就是零
*        
* 
*     一个int类型变量所存储的数字的范围是多少
*         int类型变量所能存储的最大正数用十六进制是:7FFFFFFF
*         int类型变量所能存储的绝对值最大的负整数用十六进制表示是:8000 0000
* 
*     最小负数的二进制代码是多少
*     最大正数的二进制带啊是多少
*     已知一个整数的二进制代码求出原始的数字
*     数字超过最大正数会怎样: 会溢出 
*     不同数据类型的相互转化
* 





*/