// day60_算法.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>

int main()
{
	int i = 3;
	int j = 5;
	int k;

	/*k = i | j;
	printf("%d\n", k);

	k = ~i; // 0011取反后是1100,前面是补1最后的值是负数,取反加1后是0100 即(-4)
	printf("%d\n", k);
	*/

	k = i << 1;
	printf("%d\n", k);



	return 0;
}



/*
int main()
{
	int i = 21;
	int j = 7;
	int k;
	k = i & j; // 二进制的每一位进行真与假
	printf("%d\n", k);

	k = i && j;  // k的值只能是0或1,因为&&是逻辑运算符,其结果只能是真或假,在c中真用1表示,假用0表示
	printf("%d\n", k);

	return  0;
}
*/


/*
 算法:
   狭义:对存储数据的操作
	   对不同的存储结构,要完成某一个功能所执行的操作是不一样的  比如:
	   要输出数组中所有元素的操作和要输出链表中搜友元素的操作肯定是不一样的

	   这说明 算法是依附于存储结构的,不同的存储结构,所执行的算法是不一样的

   广义: 广义的算法也叫泛型
        无论数据如何存储,对该数据的操作都是一样的

   位运算符:
   & -- 按位于  
       && 逻辑与也叫并且
	   &&与&的含义完全不同
	   1&1 = 1; 1&0 = 0; 0&1 = 0; 0&0 = 0;

   | 按位或
     ||逻辑或
	 1|0 = 1;  1|1 = 1;  0|1 = 1;  0|0 = 0;

   ~  按位取反
      ~i就是把变量i所有的二进制位取反

   ^ 按位异或
     相同为0,不同为1 
	 1^0 = 1;  0^1 = 1;  1^1 = 0;  0^0 = 0;

   << 按位左移  (重要)
       i<<3表示把i的所有二进制位左移三位,右边补零
	   左移n位相当于乘以2的n次方,前提是数据不能丢失
	   A) i = i*8
	   B) i = i<<3
	   请问上述两个语句,哪个语句执行的速度快
	    答案: B快

   >> 按位右移
   i>>3表示把i的所有二进制位右移三位,左边一般是0,也可能是根据最高位来补
	   右移n位相当于除以2的n次方,前提是数据不能丢失
	   A) i = i/8
	   B) i = i>>3
	   请问上述两个语句,哪个语句执行的速度快
		答案: B快


   位运算符的现实意义: 通过位运算符可以对数据的操作精确到每一位
*/