// day43_动态内存分配.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>
void g(int* pArr, int len)
{
    pArr[2] = 88;

}

void f(void)
{
    int a[5] = { 1,2,3,4,5 };  // 20个字节的存储空间程序员无法手动编程释放它,它只能在本函数运行完毕时由系统自动释放
    g(a, 5);
    printf("%d\n", a[2]);
}
int main()
{

    f();

    return 0;
}

/*  传统(静态)数组的缺点:
*     1. 数组长度必须事先制定,且只能是常整数,不能是变量;
*       例子:int a[5]; ok的     int len  = 5;int a[len] error
* 
*     2. 传统形式定义的数组,该数组的内存程序员无法手动释放
*        在一个函数运行期间, 系统为该数组分配的存储就会一直存在,直到函数运行完毕, 数组的空间才会被系统释放
* 
*     3. 数组的长度一旦定义,其长度就不能更改
         数组的长度不能在函数运行的过程中动态的扩充或缩小
* 
*     4. A函数定义的数组,在A函数运行期间可以被其他函数使用,但是A函数运行完毕后,A函数中的数组将无法在被其他函数使用
*        传统方式定义的数组不能跨函数使用
* 
*  
*  为什么需要动态分配内存
*      动态数组很好的解决了传统数组的4个缺陷
* 
* 
* 
* 
* 
*/